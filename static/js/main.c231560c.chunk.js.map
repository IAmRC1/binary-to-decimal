{"version":3,"sources":["App.js","index.js"],"names":["App","state","binaryValue","decimalValue","isValidated","darkmode","handleChange","e","target","type","val","checked","setState","document","body","classList","toggle","localStorage","setItem","value","convert","bin","test","split","reverse","map","num","i","Math","pow","reduce","acc","curr","validate","getItem","add","this","className","maxLength","onChange","readOnly","name","id","htmlFor","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"iQAEqBA,E,4MAEnBC,MAAQ,CACNC,YAAa,GACbC,aAAc,GACdC,YAAa,EACbC,UAAU,G,EAYZC,aAAe,SAACC,GACd,GAAqB,aAAlBA,EAAEC,OAAOC,KAAoB,CAC9B,IAAMC,EAAMH,EAAEC,OAAOG,QACrB,EAAKC,SAAS,CAAEP,SAAUK,IAAO,WAC/BG,SAASC,KAAKC,UAAUC,OAAO,cAC/BC,aAAaC,QAAQ,QAASR,EAAM,OAAS,iBAG/C,EAAKE,SAAS,CAAEV,YAAaK,EAAEC,OAAOW,QAAS,kBAAM,EAAKC,c,EAI9DA,QAAU,WACR,IAAMC,EAAM,EAAKpB,MAAMC,YAEvB,GAAW,KAARmB,EACD,GAFyB,eAEHC,KAAKD,GAAK,CAC9B,IAAMlB,EAAekB,EAAIE,MAAM,IAAIC,UAAUC,KAAI,SAACC,EAAKC,GAAN,OAAYD,EAAIE,KAAKC,IAAI,EAAGF,MAAIG,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,IAAM,GACnH,EAAKpB,SAAS,CAAER,YAAa,EAAGD,sBAEhC,EAAKS,SAAS,CAAER,YAAa,EAAGD,aAAc,UAGhD,EAAKS,SAAS,CAAER,YAAa,EAAGD,aAAc,M,EAIlD8B,SAAW,WACT,OAA8B,IAA3B,EAAKhC,MAAMG,YACL,aAC4B,IAA3B,EAAKH,MAAMG,YACZ,WAEA,I,kEAzCNa,aAAaiB,QAAQ,WAEX,SADCjB,aAAaiB,QAAQ,UAE/BrB,SAASC,KAAKC,UAAUoB,IAAI,cAC5BC,KAAKxB,SAAS,CAAEP,UAAU,O,+BA0C9B,OACA,oCACE,yBAAKgC,UAAU,mEACb,yBAAKA,UAAU,sBACb,2DACA,8BACE,yBAAKA,UAAU,cACb,+CAAoB,2BAAOA,UAAU,cAAjB,mCACpB,2BACEA,UAAS,uBAAkBD,KAAKH,YAChCK,UAAW,EACXnB,MAAOiB,KAAKnC,MAAMC,YAClBqC,SAAUH,KAAK9B,gBAEf8B,KAAKnC,MAAMG,aAAe,2BAAOiC,UAAU,yBAAjB,4BAE9B,yBAAKA,UAAU,cACb,iDACA,2BACEA,UAAU,eACVlB,MAAOiB,KAAKnC,MAAME,aAClBqC,UAAQ,QAMlB,yBAAKH,UAAU,uCACb,2BAAO5B,KAAK,WAAW4B,UAAU,uBAAuBI,KAAK,WAAW9B,QAASyB,KAAKnC,MAAMI,SAAUkC,SAAUH,KAAK9B,aAAcoC,GAAG,cACtI,2BAAOL,UAAU,uBAAuBM,QAAQ,aAAY,yCAAWP,KAAKnC,MAAMI,SAAW,QAAU,OAA3C,iB,GArFnCuC,IAAMC,WCKvCC,IAASC,OAAO,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OAA4BnC,SAASoC,eAAe,U","file":"static/js/main.c231560c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class App extends React.Component{\n\n  state = {\n    binaryValue: \"\",\n    decimalValue: \"\",\n    isValidated: 2,\n    darkmode: false,\n  }\n\n  componentDidMount(){\n    if(localStorage.getItem(\"theme\")){\n      const val = localStorage.getItem(\"theme\")\n      if(val === \"dark\"){\n        document.body.classList.add(\"dark-theme\")}\n        this.setState({ darkmode: true })\n    }\n  }\n\n  handleChange = (e) => {\n    if(e.target.type === \"checkbox\"){\n      const val = e.target.checked;\n      this.setState({ darkmode: val }, () => {\n        document.body.classList.toggle(\"dark-theme\")\n        localStorage.setItem(\"theme\", val ? \"dark\" : \"light\")\n      })\n    } else {\n      this.setState({ binaryValue: e.target.value }, () => this.convert())\n    }\n  }\n\n  convert = () => {\n    const bin = this.state.binaryValue;\n    const checkForOneAndZero = /^[0-1]{1,8}$/;\n    if(bin !== \"\"){\n      if(checkForOneAndZero.test(bin)){\n        const decimalValue = bin.split(\"\").reverse().map((num, i) => num*Math.pow(2, i)).reduce((acc, curr) => acc + curr, 0)\n        this.setState({ isValidated: 1, decimalValue })\n      } else {\n        this.setState({ isValidated: 0, decimalValue: \"\" })\n      }\n    } else {\n      this.setState({ isValidated: 2, decimalValue: \"\" })\n    }\n  }\n\n  validate = () => {\n    if(this.state.isValidated === 0){\n      return \"is-invalid\"\n    } else if(this.state.isValidated === 1) {\n      return \"is-valid\"\n    } else {\n      return \"\"\n    }\n  }\n\n  render(){\n    return (\n    <>\n      <div className=\"section vh-100 d-flex align-items-center justify-content-center\">\n        <div className=\"d-flex flex-column\">\n          <h3>Binary to Decimal Converter</h3>\n          <form>\n            <div className=\"form-group\">\n              <label>Binary Input <small className=\"text-muted\">(You can only enter 8 digits.)</small></label>\n              <input\n                className={`form-control ${this.validate()}`}\n                maxLength={8}\n                value={this.state.binaryValue}\n                onChange={this.handleChange}\n              />\n              {!this.state.isValidated && <small className=\"form-text text-danger\">Enter only 1's and 0's.</small>}\n            </div>\n            <div className=\"form-group\">\n              <label>Decimal Output</label>\n              <input\n                className=\"form-control\"\n                value={this.state.decimalValue}\n                readOnly\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n      <div className=\"custom-control custom-switch toggle\">\n        <input type=\"checkbox\" className=\"custom-control-input\" name=\"darkmode\" checked={this.state.darkmode} onChange={this.handleChange} id=\"dark-mode\" />\n        <label className=\"custom-control-label\" htmlFor=\"dark-mode\"><small>{`${this.state.darkmode ? \"Light\" : \"Dark\"} Mode`}</small></label>\n      </div>\n    </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'sanitize.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './assets/styles/custom.scss';\nimport App from './App';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));"],"sourceRoot":""}